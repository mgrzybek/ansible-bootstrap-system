# {{ ansible_managed }}

{% if bootstrap_syslog_target_protocol | lower == 'http' and bootstrap_syslog_target_log_format | lower == 'gelf' %}
destination d_http {
	http(
		url("http://{{ bootstrap_syslog_target_host }}:{{ bootstrap_syslog_target_port }}{{ bootstrap_syslog_target_http_path }}")
		method("POST")
		user-agent("syslog-ng")
{% if bootstrap_syslog_target_username != None and bootstrap_syslog_target_password != None %}
		user("{{ bootstrap_syslog_target_http_username }}")
		password("{{ bootstrap_syslog_target_http_password }}")
{% endif %}
{# if bootstrap_syslog_target_http_headers != None and bootstrap_syslog_target_http_headers | length > 0 %}
		headers(
{# for header in bootstrap_syslog_target_http_headers | dict2items %} 
			"{{ header.key }}: {{ header.value }}",
{# endfor %}
		)
{# endif %}
		{# dict2items requires ansible >= 2.6 #}
		{# body("$(format-json {#% for tag in bootstrap_syslog_additional_tags | dict2items %} --pair {{ tag.key }}={{ tag.value }}{% endfor %} --pair version='1.1' --pair host='${HOST}' --pair short_message='${MSG}' --pair level=int(${LEVEL_NUM}) --pair timestamp=int64(${R_UNIXTIME}) --pair _programname='${PROGRAM}' --pair _pid=int(${PID}) --pair _facility='${FACILITY}' --pair _class='${.classifier.class}' --key _*)") #}
		# https://www.syslog-ng.com/technical-documents/doc/syslog-ng-open-source-edition/3.16/administration-guide/35#TOPIC-956514
		body("$(format-json 
		{%- if syslog_ng_version | regex_replace('^(\d+.\d+).\d+','\1') | float >= 3.22 -%}
		--omit-empty-values
		{%- endif -%}
		{%- for tag in bootstrap_syslog_additional_tags %} --pair {{ tag }}={{ bootstrap_syslog_additional_tags[tag] }} {% endfor %} --pair version='1.1' --pair host='${HOST}' --pair short_message='${MSG}' --pair level=int(${LEVEL_NUM}) --pair timestamp=int64(${R_UNIXTIME}) --pair _programname='${PROGRAM}' --pair _pid=int(${PID}) --pair _facility='${FACILITY}' --pair _class='${.classifier.class}' --key _*)")
	);
};

log {
	source(s_sys); destination(d_http); flags(flow-control);
};
{% endif %}
{% if bootstrap_syslog_target_log_format | lower == 'syslog' and bootstrap_syslog_target_protocol | lower != 'http' %}

destination d_syslog {
	network(
		"{{ bootstrap_syslog_target_host }}"
		port({{ bootstrap_syslog_target_port }})
		transport({{ bootstrap_syslog_target_protocol }})
	);
};

log {
	source(s_sys); destination(d_syslog); flags(flow-control);
};
{% endif %}
